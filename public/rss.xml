<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Clarence Siew</title>
    <description>Clarence Siew's personal blog</description>
    <generator>Custom RSS generator</generator>
    <link>https://clarencesiew.com</link>
    <lastBuildDate>Mon, 10 Jun 2024 09:59:03 GMT</lastBuildDate>
    <atom:link href="https:/clarencesiew.com/rss.xml" rel="self" type="application/rss+xml"/>
    <item>
      <title>Building a boilerplate factory</title>
      <author>Clarence Siew</author>
      <description>An experiment in boilerplates and templates</description>
      <keywords>python, static site generator, scripting, boilerplate, web dev</keywords>
      <slug>building-boilerplate-factory</slug>
      <link>https:/clarencesiew.com/posts/building-boilerplate-factory</link>
      <guid>https:/clarencesiew.com/posts/building-boilerplate-factory</guid>
      <content:encoded><![CDATA[<p>As of late, I've been attempting some web development projects. I found a common problem with starting several new projects across different frameworks and runtimes is that I've been constantly looking up their docs online or my own notes on setting new projects up.</p>
<p>I decided it was finally time to start doing a little automation with shell scripts.</p>
<p>The first runtime-framework combination I'm working with is Node and Express. The script asks for the project name so that it could create a directory in my usual projects directory. It then goes through the motions of running the standard <code>npm</code> or <code>yarn</code> project initialisation. It also installs the <code>nodemon</code> package so that Node could automatically restart the app whenever I make a change.</p>
<p>It works great for my standard Express backend project setup. However I plan on adding flags so that it could be more convenient to toggle adding additional packages like <code>nodemon</code>. Flags could play a larger role in the future when I automate the setup process for React and Vue projects (i.e. adding a router package, or the Material UI or Bootstrap packages).</p>
<p>I'm also figuring out a frontend or interface to conveniently toggle various options in a single <em>view</em> rather than fiddling with flags and command line parameters. An <code>ncurses</code> text user interface was my initial choice, but I'm currently experimenting with an Electron app that would call the script and plug in the necessary flags.</p>
<p>You can take a look at the initial script on <a href="https://github.com/csiew/boilerplate_generators">GitHub</a>. The script is currently designed for use on Debian-based Linux distributions. Support for macOS (and maybe Windows) will come a little later.</p>]]></content:encoded>
      <pubDate>Fri, 05 Feb 2021 03:58:08 GMT</pubDate>
    </item>
    <item>
      <title>Adventures in Frontend</title>
      <author>Clarence Siew</author>
      <description>A not-so-technical chronical of the frontend shenanigans I've been up to</description>
      <keywords>react, reactjs, vite, next, nextjs, vue, vuejs, svelte, sveltekit, css, static site generator, scripting, frontend, web dev</keywords>
      <slug>frontend-adventures</slug>
      <link>https:/clarencesiew.com/posts/frontend-adventures</link>
      <guid>https:/clarencesiew.com/posts/frontend-adventures</guid>
      <content:encoded><![CDATA[<p>This post was supposed to be a short foreword to <em>another</em> post about software architecture to briefly chronicle my adventures in the world of frontend web development, from the beginning to the present. But alas, I got a little too excited and ended up writing up something a far too long for a foreword and a little too meandering for a proper post.</p>
<p>I started bumbling my way into the world of frontend development during a nail-biting final year project through <a href="https://reactjs.org/">React</a>. I consequently had PTSD from trying to learn React (pre-hooks!) with <a href="https://mui.com/">Material UI</a> (now <em>MUI</em>) at the same time. Prior to this I was mostly toying with <a href="https://pygobject.readthedocs.io/en/latest/">Python UI toolkits</a> and <a href="https://github.com/csiew/BiscuitWM">playing around with window managers on Linux</a>.</p>
<p>As I graduated from uni just as the pandemic kicked-off, I tried to roll-my-own barebones duct-taped client side JavaScript mixed with <a href="https://ejs.co/">template-based responses</a> via an Express server. This was used for my first crack at a podcast web app. It performed <em>poorly</em> and I genuinely appear to have lost the code/repository of this attempt. Some aspects of the client side JavaScript work made its way on to my personal website.</p>
<p>I then got sucked into the <a href="https://vuejs.org/">Vue.js</a> ecosystem and coming surprisingly close to completing a second crack at this podcast web app. I started getting responses to job applications close to the ~1 year anniversary (late 2020 to early 2021) of the first COVID case on Australian shores, so this project was abandoned. I also re-implemented my personal website using Vue.js.</p>
<p>I jumped back into the world of React for my first full-stack client (work) project in early 2021. It was initially built using class-based components, but once I understood how <a href="https://reactjs.org/docs/hooks-intro.html">React Hooks</a> worked, I hastily refactored the entire frontend to use functional components. We were supposedly following the Agile methodology, but being fresh out of uni it still didn't click that working on a card/issue <em>absolutely should not</em> involve refactoring half the project <em>all the time</em>. Apologies and thanks to Chris for having the patience to review my absolutely <em>horrifyingly large</em> pull requests!</p>
<p>My mesmerising UI work and my colleagues' brilliant backend + database design ended up being such a hit that this project ended up getting extended and its scope expanded. After I left this team, they rewrote everything in TypeScript (it was originally all in JavaScript; I would only be introduced to TypeScript in my next work project) whilst retaining my CSS styling.</p>
<p>Shifting to more backend-heavy work did not satisfy my frontend itch after the success of my previous work project, so I turned to making my personal website something of a playground. I replaced my Vue.js based personal site with a new React site and imbued it with the many learnings from mistakes made in my last work project. I eventually rolled out a UI library called <a href="https://github.com/csiew/brioche">Brioche</a>, but abandoned it around the time I discovered <a href="https://svelte.dev/">Svelte</a> and <a href="https://kit.svelte.dev/">SvelteKit</a>. I then rewrote my site <em>again</em> with SvelteKit.</p>
<p>I started getting interested in server-side rendering (SSR) as I learned more and more about using SvelteKit. However, a series of <a href="https://www.netlify.com/blog/migrating-breaking-changes-in-sveltekit/">breaking changes in preparation for SvelteKit's 1.0 release</a> and sheer laziness made me return to re-implementing my site with React. A failed attempt to make my site SSR using a <a href="https://vitejs.dev/">Vite</a> plugin led me to finally give <a href="https://nextjs.org/">Next.js</a> a shot. The current version of my site (at the time of publishing) was written using Next.js.</p>
<p>What comes next in my frontend adventures is still somewhat in the air. I've been looking into <a href="https://medium.com/@vueshenzhen/a-brief-introduction-of-vite-plugin-federation-9e998b2e43b">module federation</a> recently (this was going to be a part of the original post I was going to write) for my own rather-large personal project. I've pulled off another <em>Brioche</em>, in that I extracted the components from my personal website and turned them into a new component library. However this time I don't plan on turning this into a Brioche v0.2.</p>
<p>Til next time.</p>
<p><strong><em>EDIT (06/01/2023):</em></strong> I've since extended my personal site to include a CMS to update and/or publish new posts. This update was written in it!</p>
<p><strong><em>EDIT (17/03/2023):</em></strong> I decided to start scaling back the CMS features for my site. It won't go to waste as I'm migrating the CMS to another side project. I'll be reverting to statically-generated content for now.</p>]]></content:encoded>
      <pubDate>Wed, 04 Jan 2023 14:30:00 GMT</pubDate>
    </item>
    <item>
      <title>A new blog, a new static site generator</title>
      <author>Clarence Siew</author>
      <description>An experiment in static site generators</description>
      <keywords>python, static site generator, scripting, boilerplate, web dev</keywords>
      <slug>new-blog-site-generator</slug>
      <link>https:/clarencesiew.com/posts/new-blog-site-generator</link>
      <guid>https:/clarencesiew.com/posts/new-blog-site-generator</guid>
      <content:encoded><![CDATA[<p>Welcome to my new blog! I haven't imported my <a href="http://csiew.github.io/blog">old blog posts</a> to this new one. This new blog uses a successor to my static site generator script <a href="http://github.com/csiew/md2magic">md2magic</a> to help with importing and indexing posts.</p>
<p>The new script is also written in Python. However I am now using JSON files for its configuration and post manifest. This was inspired by my work on <a href="http://github.com/csiew/biscuitwm">BiscuitWM</a> which also uses a JSON file for configuration.</p>
<p>You can view the script in all its glory/horror on the <a href="http://github.com/csiew/website">repository</a> of this site (under the name <a href="https://github.com/csiew/website/blob/master/statgen.py"><em>statgen.py</em></a> in the root directory). I will perhaps create a separate repository for this script once it has reached a point of maturity.</p>
<p>Unlike md2magic, it is not responsible for converting markdown files into HTML. Like I mentioned earlier, it's now more of an indexing tool that allows your site to have a readily-available list of your posts with some metadata.</p>]]></content:encoded>
      <pubDate>Mon, 19 Oct 2020 06:22:06 GMT</pubDate>
    </item>
    <item>
      <title>One Year of Tab Shelf</title>
      <author>Clarence Siew</author>
      <description>On gratitude, an acquisition offer, and going somewhat viral</description>
      <keywords>tab shelf, vertical tabs, tab manager, google chrome, chrome, chromium, microsoft edge, extension, browser extension, node, nodejs, react, reactjs, vite, web dev, anniversary, acquisition, linkedin</keywords>
      <slug>one-year-of-tab-shelf</slug>
      <link>https:/clarencesiew.com/posts/one-year-of-tab-shelf</link>
      <guid>https:/clarencesiew.com/posts/one-year-of-tab-shelf</guid>
      <content:encoded><![CDATA[<p><img src="/tab-shelf-screenshot.png" alt="Tab Shelf screenshot" /></p>
<p>14 June marks 1 year of <a href="https://chromewebstore.google.com/detail/tab-shelf-side-panel-vert/gkiobnohamhihbaipacecjfljepjjlmg">Tab Shelf on the Chrome Web Store</a><a href="#footnote-1"><sup>1</sup></a>. Since 14 June 2023, this project has grown significantly faster and larger in scope than I could've imagined.</p>
<blockquote>
  <p><strong><em>If you haven't heard about Tab Shelf before…</em></strong> it's a Chrome and Edge extension that adds a vertical list of your tabs to the browser side panel. If you're a tab hoarder like me or need to actively have dozens of tabs open at once, this is a far more optimal way to navigate between and manage tabs!</p>
</blockquote>
<p>I'm incredibly grateful for the love and support from Tab Shelf's users, my friends and family, and my employer, who even <a href="https://www.linkedin.com/posts/crystal-delta_teamachievement-continuouslearning-crystaldelta-activity-7128510590402105345-KjHY?utm_source=share&utm_medium=member_desktop">featured Tab Shelf as part of their LinkedIn campaign</a> profiling employee achievements outside of work.</p>
<iframe src="https://www.linkedin.com/embed/feed/update/urn:li:share:7128510588728610816" height="749" width="100%" frameborder="0" allowfullscreen="" title="Embedded post" style="margin-block: 1.5rem;"></iframe>
<h1 id="beforewegetstarted">Before we get started</h1>
<p>Over the last 2 months, I've been rolling out updates to Tab Shelf that have introduced:</p>
<ul>
<li>Automated tab grouping rules - assign a list of sites to be automatically grouped. For example, you could group <a href="https://abc.net.au/">abc.net.au</a>, <a href="https://bbc.com/">bbc.com</a>, and <a href="https://reuters.com/">reuters.com</a> under a "News" tab group. If you open a link from any of these sites, that tab would automatically be moved to the "News" group.</li>
<li>Localisation in 13 languages - you can now use Tab Shelf in English, Chinese (Simplified), Korean, Japanese, German, French, Spanish, Portuguese, Italian, Thai, Vietnamese, Malay, and Indonesian.</li>
</ul>
<h1 id="thenumbers">The Numbers</h1>
<p>Since 14 June, Tab Shelf has been downloaded over 7300 times<a href="#footnote-2"><sup>2</sup></a> via the Chrome Web Store and Microsoft Edge Add-ons store.</p>
<p>Its user base is incredibly diverse<a href="#footnote-3"><sup>3</sup></a> with the largest number of users being in the United States, China, Canada, Ireland, Japan, Germany, Australia, India, and South Korea.</p>
<p>Some regions where the user base is growing rapidly include Taiwan, Hong Kong, Indonesia, Brazil, France, Spain, and Italy.</p>
<h1 id="theoffer">The Offer</h1>
<p>No, this isn't about <a href="https://youtu.be/D6me2-OurCw?si=zBQ_W-vqsmNN9x3M&t=52">an offer I can't refuse</a>.</p>
<p>On 9 October 2023, an interesting email dropped in my inbox.</p>
<p>It started off like the usual feedback email where the person on the other end was telling me how much they loved Tab Shelf. They described how impressed they were, how the user experience was <em><em>tight</em></em>, "which is something you don't see out of the gate often with projects".</p>
<p>I kept reading.</p>
<p>"Holy ****."</p>
<p>"This is an acquisition offer<a href="#footnote-4"><sup>4</sup></a>!"</p>
<p>At this point, Tab Shelf had only been out for 4 months, and yet it was already supposedly acquisition-ready. I was ecstatic. The person making the offer was a former Google engineer (who I shall refer to as <em>G</em>) in the US who was (and still is at the time of writing) actively making browser extensions of their own.</p>
<p><em>G</em> and I shot a couple of emails back and forth discussing what such an acquisition would entail. I definitely overwhelmed them with too many questions (as I had never been in such a situation before).</p>
<p><em>G</em> pointed out that many software engineers like ourselves tend to work on side projects like these, and quickly abandon them when <em>The Next Great Platform</em> or some new tech to play with comes along. He was probably alluding to my list of abandoned projects on my website. Let's be real though, none of those projects were things I used on a daily basis.</p>
<p>But Tab Shelf was <em>different</em>. It was the first time I was actively using a project of my own for my own personal use, 24/7. I <em>needed</em> it to continue support my tab hoarding tendencies.</p>
<p>In the end I declined the offer. The price they were offering was fair for a 4 month old extension that only had 390 users. However, I was also doing research on monetisation at the same time and realised that it would potentially be a good source of side income.</p>
<p>Though, being an active user of Tab Shelf myself, I also wanted to continue to have some control over its user experience.</p>
<h1 id="thesurges">The Surge(s)</h1>
<p>In Tab Shelf's one year on the Chrome Web Store, there had been multiple sudden surges of new users.</p>
<p>I usually check the Chrome Web Store developer dashboard daily to catch-up on the latest numbers. Every now and again, I get to be surprised by one of these surges.</p>
<p>When these surges happen, I usually download a CSV extract of installs and users by region to figure out what kind of phenomenon I'm dealing with. Then I scour the web for mentions of Tab Shelf.</p>
<p>In August 2023, Tab Shelf got its first taste of media exposure via <a href="https://archive.is/20230823115528/https://www.fastcompany.com/90940979/chromes-sidebar-apps-are-the-best-new-productivity-feature-no-ones-talking-about">a blog post on Fast Company</a> about the then-new category of side panel extensions on Chrome. User growth was largely isolated to English-speaking regions like the US, UK, Canada, and Australia.</p>
<p>Between August and December 2023, user numbers in South Korea inconsistently spiked, stagnated, dropped; rinse and repeat. At the time of writing, I still couldn't identify the source of the sudden attention in South Korea. But more on the user count drops later.</p>
<p>In that same time period, user numbers in Japan surged to a lesser extent. I managed to find some obscure message boards or forums where people recommended Tab Shelf. I'm not surprised if Tab Shelf is still being talked about in such spaces as growth has continued gradually in Japan.</p>
<p>In January 2024, Tab Shelf <a href="https://archive.is/pulcm">got a mention on MakeUseOf</a> in another blog post about side panel extensions.</p>
<p>In May 2024, <a href="https://huhuhang.com/post/apps/chrome-side-panel-apps">a Chinese language blog post</a>, again about side panel extensions in-general, mentioned Tab Shelf. User numbers across Chinese speaking regions and what could be assumed to be the wider Chinese diaspora worldwide shot through the roof.</p>
<p>The blog post lamented that Tab Shelf wasn't available in any other language aside from English.</p>
<p>I had a eureka moment when I realised that this probably explained the inconsistent user growth in South Korea earlier. To retain the new, substantially larger Chinese-speaking user base, and other non-English-speaking users, I quickly set to work on <a href="https://www.tabshelf.com/changelog/2024.2.x/v2024.2.0">an update to localise Tab Shelf in 13 languages</a>.</p>
<h1 id="thefuture">The Future</h1>
<p>Tab Shelf will continue on and I don't have any plans to stop any time soon. Tab Shelf isn't a world changing project, but as we have become accustomed to tabbed browsing on a scale like never before (for better or for worse), it has made browsing the web far more convenient and manageable for many.</p>
<p>As mentioned prior, monetisation will be a major goal for this year. I'm still working on the features that will be exclusive to "pro" users and the infrastructure to support activations for such users.</p>
<p>New (major) free features are also still being worked on, such as importing/exporting settings, syncing via Google accounts, etc. I'm also actively working on performance improvements, of which the first part of that work started rolling out in version 2024.2.2.</p>
<p>Stay tuned for more updates on the <a href="https://tabshelf.com">Tab Shelf website</a>.</p>
<p>In the meantime, I would be incredibly grateful if you want to <a href="https://ko-fi.com/clarencesiew">give a tip on Ko-fi</a> to support the project!</p>
<iframe id='kofiframe' src='https://ko-fi.com/clarencesiew/?hidefeed=true&widget=true&embed=true&preview=true' style='border:none;width:100%;margin-block:1.5rem;padding:4px;background:#f9f9f9;' width="100%" height="712" title='clarencesiew'></iframe>
<h1 id="addendum">Addendum</h1>
<h2 id="themechanicalclockanalogy">The Mechanical Clock analogy</h2>
<p>An analogy for working on Tab Shelf popped into my head a few weeks ago - it was like building and maintaining a tiny mechanical watch.</p>
<p>It isn't a massive project, but there are tons of moving parts within it that have to work in-sync to react to browser events and to keep up with user interaction without grinding everything to a halt.</p>
<p>It's incredibly fun to work on a project with numerous technical and practical constraints. I've been forced to think through the user experience much more carefully than previous projects. Tab Shelf has to both get out of the user's way, and in a contradictory way, a lot of its features need to be easily discoverable and accessible.</p>
<h2 id="onmarketing">On marketing</h2>
<p>I had not seriously invested much time and effort into marketing Tab Shelf, just yet.</p>
<p>So it's been a wonderful surprise to see blog posts featuring Tab Shelf, and the occasional mention on message boards, forums, and Reddit. It seems that viral word-of-mouth marketing seems to be doing a fantastic job so far.</p>
<p>The most I have done as of yet has been to post to a Discord group for browser extension developers, the ideal demographic of power users that would need such an extension.</p>
<p>I made a couple of posts on my own personal social media too. A majority of my family, friends, and acquaintances are not power users (or tab hoarders), so they're the perfect test bed for studying how to attract non-power users.</p>
<h1 id="footnotes">Footnotes</h1>
<ol>
<li><p><span id="footnote-1"></span>Anniversary dates can be a little confusing, however. 5 June marks the anniversary of Tab Shelf being spun-off from another extension project I was working on (LinkQueue), and from that parts of Tab Shelf's codebase dates back to 19 November 2022.</p></li>
<li><p><span id="footnote-2"></span>This data was sourced from both the Chrome Web Store and Microsoft Edge Add-ons store.</p></li>
<li><p><span id="footnote-3"></span>This doesn't take into account users from other countries travelling to or living in other countries; only their location is taken into account.</p></li>
<li><p><span id="footnote-4"></span>More like an expression of interest to acquire Tab Shelf. Just using the term offer to stick with the Godfather reference.</p></li>
</ol>]]></content:encoded>
      <pubDate>Mon, 10 Jun 2024 07:30:41 GMT</pubDate>
    </item>
    <item>
      <title>Tab Shelf</title>
      <author>Clarence Siew</author>
      <description>Announcing a vertical tab management extension for Chrome/Chromium</description>
      <keywords>tab shelf, vertical tabs, tab manager, google chrome, chrome, chromium, microsoft edge, extension, browser extension, node, nodejs, react, reactjs, vite, web dev</keywords>
      <slug>tab-shelf</slug>
      <link>https:/clarencesiew.com/posts/tab-shelf</link>
      <guid>https:/clarencesiew.com/posts/tab-shelf</guid>
      <content:encoded><![CDATA[<p>On 13 June 2023, I released <a href="https://tabshelf.clarencesiew.com/">Tab Shelf</a> to the world. It's a Google Chrome extension that lets you view and manage your tabs from the new-ish side panel.</p>
<h2 id="features">Features</h2>
<p>Aside from viewing your tabs in the side panel, you can also:</p>
<ul>
<li>Put tabs to sleep to save system resources.</li>
<li>Move tabs between groups.</li>
<li>Create new tab groups from a selection of tabs.</li>
<li>Close tabs in bulk.</li>
<li>Control mute/unmute volume (it doesn't even need to have audio playing - you can mute a tab if you suspect that it will autoplay video or audio ahead of time).</li>
<li>Filter tabs by group (once you get used to it, it effectively feels like a way to treat tab groups like separate workspaces).</li>
</ul>
<h2 id="inspiration">Inspiration</h2>
<p>Of course, vertical tabs aren't new. Not at all. They're already common features on other browsers such as Safari, Microsoft Edge, Vivaldi, and of course, Arc by The Browser Company. Firefox has had a multitude of legendary vertical tab management extensions like Tree-Style Tabs and Sideberry.</p>
<p>I had previously grown accustomed to vertical tabs when trying the Arc browser extensively. When switching back to Firefox, I just had to install Sideberry to continue having these darn vertical tabs.</p>
<p>When I hopped on over back to Chrome (I've switched back due for dev purposes), I realised there <em>still</em> wasn't a vertical tab solution ready. Even after Google added side panels to the browser. I was surprised that there wasn't even an API to make use of it at the time.</p>
<h2 id="fromtheashes">From the ashes</h2>
<p>Over the King's Birthday long weekend, I discovered that Google had <em>finally</em> made the Side Panel extensions API available in Chrome v114. I immediately thought back to an extension I was working on called TabQueue, which was meant to help with queueing tabs (akin to the already-existent Reading List). I thought: <em>"How about I slap on some vertical tab management features to this?"</em></p>
<p>Without going too deep into it, much of the TabQueue codebase was written at a time I was just returning to using React extensively for the first time in 1-2 years. I had forgotten how to use the React Context API and state management in TabQueue was a dog's breakfast. I effectively gutted most of the TabQueue code but kept (and heavily modified) much of the existing CSS styling.</p>
<p>Tab Shelf definitely isn't the first vertical tab management extension to make use of the Side Panel API, but I have to say (with some considerable bias) that it's perhaps the prettiest looking one out there at the moment.</p>
<h2 id="giveitago">Give it a go!</h2>
<p>You can now get <a href="https://chrome.google.com/webstore/detail/tab-shelf/gkiobnohamhihbaipacecjfljepjjlmg">Tab Shelf on the Chrome Web Store</a>. I'd love to get feedback on it as I'm working through new features and planning future releases. It's already pretty featureful at the time of writing this, but there's still so much more in the pipeline.</p>]]></content:encoded>
      <pubDate>Sat, 17 Jun 2023 07:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>